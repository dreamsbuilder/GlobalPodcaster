import React, { useState, useEffect } from "react";
import { 
  Plus, 
  Globe, 
  Mic, 
  Clock, 
  TrendingUp,
  ExternalLink,
  Settings,
  Play,
  Pause,
  MoreVertical
} from "lucide-react";

// Dummy data
const dummyUser = {
  id: 1,
  full_name: "John Doe",
  email: "john@example.com",
  onboarding_completed: true
};

const dummyPodcasts = [
  {
    id: 1,
    title: "Tech Talk Daily",
    description: "Daily discussions about the latest in technology",
    original_language: "English",
    cover_image: "https://via.placeholder.com/150/4F46E5/FFFFFF?text=TT",
    episode_count: 45,
    created_date: "2024-01-15",
    updated_date: "2024-09-10"
  },
  {
    id: 2,
    title: "History Uncovered",
    description: "Exploring forgotten stories from the past",
    original_language: "English",
    cover_image: "https://via.placeholder.com/150/059669/FFFFFF?text=HU",
    episode_count: 28,
    created_date: "2024-02-20",
    updated_date: "2024-09-08"
  },
  {
    id: 3,
    title: "Mindful Moments",
    description: "Guided meditations and wellness tips",
    original_language: "English",
    cover_image: "https://via.placeholder.com/150/DC2626/FFFFFF?text=MM",
    episode_count: 67,
    created_date: "2024-03-10",
    updated_date: "2024-09-12"
  }
];

const dummyTranslations = [
  {
    id: 1,
    podcast_id: 1,
    target_language: "Spanish",
    status: "published",
    progress: 100,
    episode_count: 45,
    created_date: "2024-08-15",
    updated_date: "2024-09-10"
  },
  {
    id: 2,
    podcast_id: 1,
    target_language: "French",
    status: "in_progress",
    progress: 75,
    episode_count: 34,
    created_date: "2024-08-20",
    updated_date: "2024-09-08"
  },
  {
    id: 3,
    podcast_id: 2,
    target_language: "German",
    status: "published",
    progress: 100,
    episode_count: 28,
    created_date: "2024-08-25",
    updated_date: "2024-09-05"
  },
  {
    id: 4,
    podcast_id: 3,
    target_language: "Italian",
    status: "processing",
    progress: 45,
    episode_count: 30,
    created_date: "2024-09-01",
    updated_date: "2024-09-12"
  }
];

// Stats Overview Component
const StatsOverview = ({ stats }) => (
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <Card className="backdrop-blur-md bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-blue-600 mb-1">Total Podcasts</p>
            <p className="text-3xl font-bold text-blue-900">{stats.totalPodcasts}</p>
          </div>
          <Mic className="w-8 h-8 text-blue-600" />
        </div>
      </CardContent>
    </Card>
    
    <Card className="backdrop-blur-md bg-gradient-to-br from-green-50 to-green-100 border-green-200">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-green-600 mb-1">Languages</p>
            <p className="text-3xl font-bold text-green-900">{stats.totalLanguages}</p>
          </div>
          <Globe className="w-8 h-8 text-green-600" />
        </div>
      </CardContent>
    </Card>
    
    <Card className="backdrop-blur-md bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-purple-600 mb-1">Total Translations</p>
            <p className="text-3xl font-bold text-purple-900">{stats.totalTranslations}</p>
          </div>
          <TrendingUp className="w-8 h-8 text-purple-600" />
        </div>
      </CardContent>
    </Card>
    
    <Card className="backdrop-blur-md bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200">
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-sm font-medium text-orange-600 mb-1">Active</p>
            <p className="text-3xl font-bold text-orange-900">{stats.activeTranslations}</p>
          </div>
          <Clock className="w-8 h-8 text-orange-600" />
        </div>
      </CardContent>
    </Card>
  </div>
);

// Podcast Card Component
const PodcastCard = ({ podcast, translations }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  
  return (
    <Card className="hover:shadow-lg transition-all duration-200">
      <CardContent className="p-4">
        <div className="flex items-center gap-4">
          <img 
            src={podcast.cover_image} 
            alt={podcast.title}
            className="w-16 h-16 rounded-lg object-cover"
          />
          
          <div className="flex-1 min-w-0">
            <div className="flex items-center justify-between mb-2">
              <h3 className="text-lg font-semibold text-gray-900 truncate">
                {podcast.title}
              </h3>
              <button
                onClick={() => setIsPlaying(!isPlaying)}
                className="p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                {isPlaying ? (
                  <Pause className="w-4 h-4 text-gray-600" />
                ) : (
                  <Play className="w-4 h-4 text-gray-600" />
                )}
              </button>
            </div>
            
            <p className="text-sm text-gray-600 mb-3 line-clamp-2">
              {podcast.description}
            </p>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <span className="text-sm text-gray-500">
                  {podcast.episode_count} episodes
                </span>
                <Badge variant="secondary">
                  {podcast.original_language}
                </Badge>
              </div>
              
              <div className="flex items-center gap-2">
                {translations.map((translation) => (
                  <Badge 
                    key={translation.id}
                    variant={translation.status === 'published' ? 'success' : 'warning'}
                    className="text-xs"
                  >
                    {translation.target_language}
                  </Badge>
                ))}
                <button className="p-1 hover:bg-gray-100 rounded">
                  <MoreVertical className="w-4 h-4 text-gray-400" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

// Translation Status Component
const TranslationStatus = ({ translations }) => (
  <Card className="backdrop-blur-md bg-white/80 shadow-lg border-0">
    <CardHeader className="pb-4">
      <CardTitle className="flex items-center gap-2">
        <Globe className="w-5 h-5 text-green-600" />
        Translation Status
      </CardTitle>
    </CardHeader>
    <CardContent className="space-y-4">
      {translations.map((translation) => (
        <div key={translation.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
          <div className="flex-1">
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium text-sm">{translation.target_language}</span>
              <Badge 
                variant={
                  translation.status === 'published' ? 'success' :
                  translation.status === 'in_progress' ? 'warning' : 'default'
                }
              >
                {translation.status.replace('_', ' ')}
              </Badge>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className={`h-2 rounded-full transition-all duration-300 ${
                  translation.status === 'published' ? 'bg-green-500' :
                  translation.status === 'in_progress' ? 'bg-yellow-500' : 'bg-blue-500'
                }`}
                style={{ width: `${translation.progress}%` }}
              />
            </div>
            <span className="text-xs text-gray-500 mt-1">
              {translation.episode_count} episodes â€¢ {translation.progress}%
            </span>
          </div>
        </div>
      ))}
    </CardContent>
  </Card>
);

// Empty State Component
const EmptyState = () => (
  <Card className="text-center py-12">
    <CardContent>
      <Mic className="w-16 h-16 text-gray-300 mx-auto mb-4" />
      <h3 className="text-xl font-semibold text-gray-900 mb-2">
        No podcasts yet
      </h3>
      <p className="text-gray-600 mb-6">
        Add your first podcast to start globalizing your content
      </p>
      <Button className="bg-blue-600 hover:bg-blue-700 text-white">
        <Plus className="w-4 h-4 mr-2" />
        Add Your First Podcast
      </Button>
    </CardContent>
  </Card>
);

export default function Dashboard() {
  const [user, setUser] = useState(null);
  const [podcasts, setPodcasts] = useState([]);
  const [translations, setTranslations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate API loading
    const loadDashboardData = () => {
      setTimeout(() => {
        setUser(dummyUser);
        setPodcasts(dummyPodcasts);
        setTranslations(dummyTranslations);
        setIsLoading(false);
      }, 1000);
    };

    loadDashboardData();
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="animate-pulse flex items-center gap-3">
          <div className="w-8 h-8 bg-blue-500 rounded-full animate-bounce"></div>
          <div className="text-xl font-medium text-gray-600">Loading your podcasts...</div>
        </div>
      </div>
    );
  }

  const stats = {
    totalPodcasts: podcasts.length,
    totalLanguages: [...new Set(translations.map(t => t.target_language))].length,
    totalTranslations: translations.length,
    activeTranslations: translations.filter(t => t.status === 'published').length
  };

  return (
    <div className="min-h-screen p-6 md:p-8 bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-2">
              Welcome back, {user?.full_name?.split(' ')[0] || 'there'}! ðŸ‘‹
            </h1>
            <p className="text-gray-600">
              {podcasts.length === 0 
                ? "Ready to globalize your first podcast?"
                : `You have ${stats.totalTranslations} translations across ${stats.totalLanguages} languages`
              }
            </p>
          </div>
          
          <Button className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-medium px-6 py-3 rounded-xl transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]">
            <Plus className="w-5 h-5 mr-2" />
            Add New Podcast
          </Button>
        </div>

        {/* Stats Overview */}
        <StatsOverview stats={stats} />

        {/* Main Content */}
        {podcasts.length === 0 ? (
          <EmptyState />
        ) : (
          <div className="grid lg:grid-cols-3 gap-8">
            {/* My Podcasts */}
            <div className="lg:col-span-2">
              <Card className="backdrop-blur-md bg-white/80 shadow-lg border-0">
                <CardHeader className="pb-4">
                  <CardTitle className="flex items-center justify-between">
                    <span className="flex items-center gap-2">
                      <Mic className="w-5 h-5 text-blue-600" />
                      My Podcasts
                    </span>
                    <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                      {podcasts.length}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {podcasts.map((podcast) => (
                    <PodcastCard 
                      key={podcast.id} 
                      podcast={podcast} 
                      translations={translations.filter(t => t.podcast_id === podcast.id)}
                    />
                  ))}
                </CardContent>
              </Card>
            </div>

            {/* Translation Status */}
            <div>
              <TranslationStatus translations={translations} />
            </div>
          </div>
        )}
      </div>
    </div>
  );
}